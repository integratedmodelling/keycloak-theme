{"version":3,"mappings":"iNAUA,SAASA,EACPC,EACAC,EACoB,CACpB,UAAWC,KAAQF,EAAS,CAExB,YAAUE,GACVA,EAAK,KAAK,SAASD,CAAW,GAC9B,eAAgBC,EAEhB,OAAOA,EAAK,WAEd,GAAI,aAAcA,EACT,OAAAH,EAAcG,EAAK,SAAUD,CAAW,CAEnD,CAEF,CAEO,MAAME,EAAmB,IAAM,CACpC,MAAMC,EAAUC,IAEV,CAACL,EAASM,CAAU,EAAIC,EAAqB,EAC7C,CAAE,YAAAN,GAAgBO,IAEbC,EAACC,GAAWC,EAAiB,CAAE,OAAAD,EAAQ,QAAAN,CAAS,GAAGE,CAAU,EACxE,MAAMM,EAAaC,EACjB,IAAMd,EAAcC,GAAW,GAAIC,CAAY,EAC/C,CAACD,EAASC,CAAW,GAGhB,OAAAW,GAAeE,EAAAC,EAAA,CAAU,WAAAH,CAAwB,EAC1D,EAMMG,EAAY,CAAC,CAAE,WAAAH,KAAiC,CAC9C,MAAE,YAAAI,GAAgBX,IAElBY,EAAUC,EACd,IAAMC,EAAA,WAAOC,EAASJ,EAAY,YAAaJ,CAAU,yCAGzD,OAAAE,EAACO,GAAS,SAAUP,EAACQ,IAAQ,EAC3B,SAAAR,EAACG,GAAQ,EACX,EAEJ","names":["findComponent","content","componentId","item","ContentComponent","context","useEnvironment","setContent","useState","useParams","usePromise","signal","fetchContentJson","modulePath","useMemo","jsx","Component","environment","Element","lazy","__vitePreload","joinPath","Suspense","Spinner"],"sources":["../../src/content/ContentComponent.tsx"],"sourcesContent":["import { Spinner } from \"@patternfly/react-core\";\nimport { Suspense, lazy, useMemo, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useEnvironment } from \"../root/KeycloakContext\";\nimport { MenuItem } from \"../root/PageNav\";\nimport { ContentComponentParams } from \"../routes\";\nimport { joinPath } from \"../utils/joinPath\";\nimport { usePromise } from \"../utils/usePromise\";\nimport fetchContentJson from \"./fetchContent\";\n\nfunction findComponent(\n  content: MenuItem[],\n  componentId: string,\n): string | undefined {\n  for (const item of content) {\n    if (\n      \"path\" in item &&\n      item.path.endsWith(componentId) &&\n      \"modulePath\" in item\n    ) {\n      return item.modulePath;\n    }\n    if (\"children\" in item) {\n      return findComponent(item.children, componentId);\n    }\n  }\n  return undefined;\n}\n\nexport const ContentComponent = () => {\n  const context = useEnvironment();\n\n  const [content, setContent] = useState<MenuItem[]>();\n  const { componentId } = useParams<ContentComponentParams>();\n\n  usePromise((signal) => fetchContentJson({ signal, context }), setContent);\n  const modulePath = useMemo(\n    () => findComponent(content || [], componentId!),\n    [content, componentId],\n  );\n\n  return modulePath && <Component modulePath={modulePath} />;\n};\n\ntype ComponentProps = {\n  modulePath: string;\n};\n\nconst Component = ({ modulePath }: ComponentProps) => {\n  const { environment } = useEnvironment();\n\n  const Element = lazy(\n    () => import(joinPath(environment.resourceUrl, modulePath)),\n  );\n  return (\n    <Suspense fallback={<Spinner />}>\n      <Element />\n    </Suspense>\n  );\n};\n\nexport default ContentComponent;\n"],"file":"assets/ContentComponent-B5ShcYj7.js"}