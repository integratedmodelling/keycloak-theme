{"version":3,"file":"SigningIn-qXO_Lhx3.js","sources":["../../src/account-security/SigningIn.tsx"],"sourcesContent":["import {\n  Button,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  PageSection,\n  Spinner,\n  Split,\n  SplitItem,\n  Title,\n} from \"@patternfly/react-core\";\nimport { CSSProperties, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { getCredentials } from \"../api/methods\";\nimport {\n  CredentialContainer,\n  CredentialMetadataRepresentation,\n} from \"../api/representations\";\nimport { EmptyRow } from \"../components/datalist/EmptyRow\";\nimport { Page } from \"../components/page/Page\";\nimport { TFuncKey } from \"../i18n\";\nimport { formatDate } from \"../utils/formatDate\";\nimport { usePromise } from \"../utils/usePromise\";\nimport { useEnvironment } from \"../root/KeycloakContext\";\n\ntype MobileLinkProps = {\n  title: string;\n  onClick: () => void;\n  testid?: string;\n};\n\nconst MobileLink = ({ title, onClick, testid }: MobileLinkProps) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dropdown\n        isPlain\n        position=\"right\"\n        toggle={<KebabToggle onToggle={setOpen} />}\n        className=\"pf-u-display-none-on-lg\"\n        isOpen={open}\n        dropdownItems={[\n          <DropdownItem key=\"1\" onClick={onClick}>\n            {title}\n          </DropdownItem>,\n        ]}\n      />\n      <Button\n        variant=\"link\"\n        onClick={onClick}\n        className=\"pf-u-display-none pf-u-display-inline-flex-on-lg\"\n        data-testid={testid}\n      >\n        {title}\n      </Button>\n    </>\n  );\n};\n\nexport const SigningIn = () => {\n  const { t } = useTranslation();\n  const context = useEnvironment();\n  const { login } = context.keycloak;\n\n  const [credentials, setCredentials] = useState<CredentialContainer[]>();\n\n  usePromise(\n    (signal) => getCredentials({ signal, context }),\n    setCredentials,\n    [],\n  );\n\n  const credentialRowCells = (\n    credMetadata: CredentialMetadataRepresentation,\n  ) => {\n    const credential = credMetadata.credential;\n    const maxWidth = { \"--pf-u-max-width--MaxWidth\": \"300px\" } as CSSProperties;\n    const items = [\n      <DataListCell\n        key=\"title\"\n        data-testrole=\"label\"\n        className=\"pf-u-max-width\"\n        style={maxWidth}\n      >\n        {credential.userLabel || t(credential.type as TFuncKey)}\n      </DataListCell>,\n    ];\n\n    if (credential.createdDate) {\n      items.push(\n        <DataListCell\n          key={\"created\" + credential.id}\n          data-testrole=\"created-at\"\n        >\n          <Trans i18nKey=\"credentialCreatedAt\">\n            <strong className=\"pf-u-mr-md\"></strong>\n            {{ date: formatDate(new Date(credential.createdDate)) }}\n          </Trans>\n        </DataListCell>,\n      );\n    }\n    return items;\n  };\n\n  if (!credentials) {\n    return <Spinner />;\n  }\n\n  const credentialUniqueCategories = [\n    ...new Set(credentials.map((c) => c.category)),\n  ];\n\n  return (\n    <Page title={t(\"signingIn\")} description={t(\"signingInDescription\")}>\n      {credentialUniqueCategories.map((category) => (\n        <PageSection key={category} variant=\"light\" className=\"pf-u-px-0\">\n          <Title headingLevel=\"h2\" size=\"xl\" id={`${category}-categ-title`}>\n            {t(category as TFuncKey)}\n          </Title>\n          {credentials\n            .filter((cred) => cred.category == category)\n            .map((container) => (\n              <>\n                <Split className=\"pf-u-mt-lg pf-u-mb-lg\">\n                  <SplitItem>\n                    <Title\n                      headingLevel=\"h3\"\n                      size=\"md\"\n                      className=\"pf-u-mb-md\"\n                      data-testid={`${container.type}/help`}\n                    >\n                      <span\n                        className=\"cred-title pf-u-display-block\"\n                        data-testid={`${container.type}/title`}\n                      >\n                        {t(container.displayName as TFuncKey)}\n                      </span>\n                    </Title>\n                    <span data-testid={`${container.type}/help-text`}>\n                      {t(container.helptext as TFuncKey)}\n                    </span>\n                  </SplitItem>\n                  {container.createAction && (\n                    <SplitItem isFilled>\n                      <div className=\"pf-u-float-right\">\n                        <MobileLink\n                          onClick={() =>\n                            login({\n                              action: container.createAction,\n                            })\n                          }\n                          title={t(\"setUpNew\", {\n                            name: t(\n                              `${container.type}-display-name` as TFuncKey,\n                            ),\n                          })}\n                          testid={`${container.type}/create`}\n                        />\n                      </div>\n                    </SplitItem>\n                  )}\n                </Split>\n\n                <DataList\n                  aria-label=\"credential list\"\n                  className=\"pf-u-mb-xl\"\n                  data-testid={`${container.type}/credential-list`}\n                >\n                  {container.userCredentialMetadatas.length === 0 && (\n                    <EmptyRow\n                      message={t(\"notSetUp\", {\n                        name: t(container.displayName as TFuncKey),\n                      })}\n                      data-testid={`${container.type}/not-set-up`}\n                    />\n                  )}\n\n                  {container.userCredentialMetadatas.map((meta) => (\n                    <DataListItem key={meta.credential.id}>\n                      <DataListItemRow id={`cred-${meta.credential.id}`}>\n                        <DataListItemCells\n                          className=\"pf-u-py-0\"\n                          dataListCells={[\n                            ...credentialRowCells(meta),\n                            <DataListAction\n                              key=\"action\"\n                              id={`action-${meta.credential.id}`}\n                              aria-label={t(\"updateCredAriaLabel\")}\n                              aria-labelledby={`cred-${meta.credential.id}`}\n                            >\n                              {container.removeable ? (\n                                <Button\n                                  variant=\"danger\"\n                                  onClick={() => {\n                                    login({\n                                      action:\n                                        \"delete_credential:\" +\n                                        meta.credential.id,\n                                    });\n                                  }}\n                                >\n                                  {t(\"delete\")}\n                                </Button>\n                              ) : (\n                                <Button\n                                  variant=\"secondary\"\n                                  onClick={() => {\n                                    if (container.updateAction)\n                                      login({ action: container.updateAction });\n                                  }}\n                                  data-testrole=\"update\"\n                                >\n                                  {t(\"update\")}\n                                </Button>\n                              )}\n                            </DataListAction>,\n                          ]}\n                        />\n                      </DataListItemRow>\n                    </DataListItem>\n                  ))}\n                </DataList>\n              </>\n            ))}\n        </PageSection>\n      ))}\n    </Page>\n  );\n};\n\nexport default SigningIn;\n"],"names":["MobileLink","title","onClick","testid","open","setOpen","useState","jsxs","Fragment","jsx","Dropdown","KebabToggle","DropdownItem","Button","SigningIn","t","useTranslation","context","useEnvironment","login","credentials","setCredentials","usePromise","signal","getCredentials","credentialRowCells","credMetadata","credential","items","DataListCell","Trans","formatDate","Spinner","credentialUniqueCategories","c","Page","category","PageSection","Title","cred","container","Split","SplitItem","DataList","EmptyRow","meta","DataListItem","DataListItemRow","DataListItemCells","DataListAction"],"mappings":"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"}